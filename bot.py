import os
import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiohttp

from pro_users import is_pro, set_pro, set_free

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ GROQ_API_KEY –≤ .env!")

logging.basicConfig(level=logging.INFO)

LANGUAGES = {
    "üá∑üá¥ Rom√¢nƒÉ": (
        "ro",
        "RƒÉspunde doar √Æn limba rom√¢nƒÉ. Scrie formulele matematice exact ca de m√¢nƒÉ pe caiet: folose»ôte ‚àö pentru radical, frac»õiile scrie-le ca (numƒÉrƒÉtor)/(numitor), de exemplu (a+b)/c sau (‚àö3)/2, iar pentru puteri folose»ôte caractere Unicode pentru exponen»õi (x¬≤, c‚Åµ, a‚Åø), nu simbolul ^. Nu folosi niciodatƒÉ LaTeX, nici frac»õii suprapuse, nici simboluri speciale. Nu folosi bold, italics, stelute, markdown sau emoji. Scrie rƒÉspunsul ca un text continuu, nu folosi niciodatƒÉ liste, stelute, buline, liniu»õe, nici numerotare. Fiecare formulƒÉ sau pas se scrie pe un r√¢nd nou, fƒÉrƒÉ alte simboluri la √Ænceputul r√¢ndului."
    ),
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": (
        "ru",
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ó–∞–ø–∏—Å—ã–≤–∞–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Ç–∞–∫, –∫–∞–∫ –ø–∏—à—É—Ç –æ—Ç —Ä—É–∫–∏: ‚àö –¥–ª—è –∫–æ—Ä–Ω—è, –¥—Ä–æ–±–∏ –∫–∞–∫ (—á–∏—Å–ª–∏—Ç–µ–ª—å)/(–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å), –Ω–∞–ø—Ä–∏–º–µ—Ä (a+b)/c –∏–ª–∏ (‚àö3)/2, —Å—Ç–µ–ø–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é Unicode-—Å–∏–º–≤–æ–ª–æ–≤ (x¬≤, c‚Åµ, a‚Åø), –Ω–µ —Å–∏–º–≤–æ–ª ^. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX, –Ω–µ –ø–∏—à–∏ –¥—Ä–æ–±–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –∑–≤—ë–∑–¥–æ—á–∫–∏, markdown –∏–ª–∏ —ç–º–æ–¥–∑–∏. –ü–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–æ–≥–¥–∞ —Å–ø–∏—Å–∫–∏, –∑–≤—ë–∑–¥–æ—á–∫–∏, –±—É–ª–ª–∏—Ç—ã, —Ç–∏—Ä–µ –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é. –ö–∞–∂–¥—É—é —Ñ–æ—Ä–º—É–ª—É –∏–ª–∏ —à–∞–≥ –ø–∏—à–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏."
    ),
    "üá¨üáß English": (
        "en",
        "Reply only in English. Write mathematical formulas as if written by hand: use ‚àö for square root, fractions as (numerator)/(denominator), e.g., (a+b)/c or (‚àö3)/2, and for powers use Unicode superscript characters for exponents (x¬≤, c‚Åµ, a‚Åø), not the ^ symbol. Never use LaTeX, stacked fractions, or special symbols. Do not use bold, italics, asterisks, markdown, or emojis. Write the answer as plain text, never use lists, bullets, asterisks, dashes or numbering. Each formula or step should be written on a new line, with no symbols at the start of the line."
    ),
}
DEFAULT_LANG = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"

# Tastatura pentru alegerea limbii (la start/language)
lang_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá∑üá¥ Rom√¢nƒÉ")],
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [KeyboardButton(text="üá¨üáß English")]
    ],
    resize_keyboard=True
)

# Tastatura cu "Chat nou" (dupƒÉ alegerea limbii)
chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï Chat nou")]
    ],
    resize_keyboard=True
)

user_lang = {}  # user_id: emoji —è–∑—ã–∫–∞

user_history = {}  # user_id: list of messages (context)
MAX_CONTEXT = 5    # —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç) –ø–æ–º–Ω–∏—Ç—å

router = Router()

def get_sys_prompt(lang):
    return LANGUAGES[lang][1]

ADMIN_IDS = [6009593253]  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

def clean_star_lines(text):
    # EliminƒÉ stelute/liniu»õe/bullets la √Ænceput de r√¢nd + spa»õii, dar nu atinge con»õinutul r√¢ndului
    return re.sub(r'^[\*\-\‚Ä¢\u2022]\s*', '', text, flags=re.MULTILINE)

@router.message(Command("pro"))
async def make_pro(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_pro(uid)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            set_pro(message.from_user.id)
            await message.answer("–í–∞–º –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PRO.")

@router.message(Command("free"))
async def remove_pro(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_free(uid)
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–Ω—è—Ç PRO.")
        else:
            set_free(message.from_user.id)
            await message.answer("–í–∞—à PRO —Å–Ω—è—Ç.")
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.message(Command("status"))
async def status(message: types.Message):
    if is_pro(message.from_user.id):
        await message.answer("–£ –≤–∞—Å PRO-–¥–æ—Å—Ç—É–ø üü¢")
    else:
        await message.answer("–£ –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø üîò. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro")

@router.message(Command("start"))
@router.message(Command("language"))
async def choose_language(message: types.Message):
    user_history.pop(message.from_user.id, None)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Alege limba / Choose language:",
        reply_markup=lang_kb
    )

@router.message(Command("newchat"))
@router.message(lambda m: m.text and m.text.strip() == "üÜï Chat nou")
async def new_chat(message: types.Message):
    user_history.pop(message.from_user.id, None)
    await message.answer(
        "Ai √Ænceput un chat nou! √éntreabƒÉ orice vrei.",
        reply_markup=chat_kb
    )

@router.message(lambda m: m.text in LANGUAGES)
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = message.text
    greetings = {
        "üá∑üá¥ Rom√¢nƒÉ": "Salut! Trimite-mi √Æntrebarea ta.",
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        "üá¨üáß English": "Hi! Please ask your question."
    }
    # DupƒÉ alegerea limbii, aratƒÉ doar butonul "Chat nou"
    await message.answer(greetings[message.text], reply_markup=chat_kb)

@router.message()
async def ask_groq(message: types.Message):
    user_id = message.from_user.id

    # DacƒÉ utilizatorul nu a ales limba - afi»ôeazƒÉ tastatura de limbi
    if user_id not in user_lang:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / VƒÉ rugƒÉm sƒÉ alege»õi limba / Please choose language:",
            reply_markup=lang_kb
        )
        return

    # Limita pentru utilizatorii FREE
    if not is_pro(user_id):
        if len(message.text) > 250:
            await message.answer("‚ùó –≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro")
            return

    # Butonul "Chat nou" - »ôterge istoria »ôi pƒÉstreazƒÉ butonul
    if message.text.strip() == "üÜï Chat nou":
        user_history.pop(user_id, None)
        await message.answer(
            "Ai √Ænceput un chat nou! √éntreabƒÉ orice vrei.",
            reply_markup=chat_kb
        )
        return

    # Istoric pentru context
    hist = user_history.setdefault(user_id, [])
    hist.append({"role": "user", "content": message.text.strip()})
    if len(hist) > MAX_CONTEXT * 2:
        hist = hist[-MAX_CONTEXT * 2 :]
    user_history[user_id] = hist

    lang = user_lang.get(user_id, DEFAULT_LANG)
    sys_prompt = get_sys_prompt(lang)
    messages_for_groq = [{"role": "system", "content": sys_prompt}] + hist

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama-3.3-70b-versatile",
        "messages": messages_for_groq,
        "temperature": 0.7,
        "max_tokens": 1000
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    answer = result["choices"][0]["message"]["content"]
                    answer = clean_star_lines(answer.strip())
                    hist.append({"role": "assistant", "content": answer})
                    if len(hist) > MAX_CONTEXT * 2:
                        hist = hist[-MAX_CONTEXT * 2 :]
                    user_history[user_id] = hist
                    await message.answer(answer, reply_markup=chat_kb)
                else:
                    err_text = await resp.text()
                    logging.error(f"Groq API error: {resp.status}, {err_text}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=chat_kb)
        except Exception as e:
            logging.exception("Error contacting Groq API")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=chat_kb)

async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
