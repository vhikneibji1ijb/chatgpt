import os
import logging
import asyncio
import re
import json
import datetime
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiohttp
from googletrans import Translator

from pro_users import is_pro, set_pro, set_free

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ GROQ_API_KEY –≤ .env!")

logging.basicConfig(level=logging.INFO)

LANGUAGES = {
    "üá∑üá¥ Rom√¢nƒÉ": (
        "ro",
        "DacƒÉ √Æntrebarea utilizatorului este despre rezolvarea unei probleme sau calcule matematice, rƒÉspunde folosind formule »ôi pa»ôi clari scri»ôi ca de m√¢nƒÉ: folose»ôte ‚àö pentru radical, frac»õiile ca (numƒÉrƒÉtor)/(numitor), de exemplu (a+b)/c sau (‚àö3)/2, puterile cu caractere Unicode pentru exponen»õi (x¬≤, c‚Åµ, a‚Åø), nu simbolul ^. Nu folosi niciodatƒÉ LaTeX, frac»õii suprapuse, bold, italics, stelute, markdown sau emoji. Scrie formulele pe c√¢te un r√¢nd, fƒÉrƒÉ alte simboluri la √Ænceputul r√¢ndului. DacƒÉ √Æntrebarea nu este despre o problemƒÉ concretƒÉ, ci este despre sfaturi, teorie, motiva»õie sau metode de √ÆnvƒÉ»õare, rƒÉspunde cu un text explicativ, clar »ôi prietenos, pe √Æn»õelesul elevului."
    ),
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": (
        "ru",
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —à–∞–≥–∞–º–∏, –∫–∞–∫ –ø–∏—à—É—Ç –æ—Ç —Ä—É–∫–∏: ‚àö –¥–ª—è –∫–æ—Ä–Ω—è, –¥—Ä–æ–±–∏ –∫–∞–∫ (—á–∏—Å–ª–∏—Ç–µ–ª—å)/(–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å), –Ω–∞–ø—Ä–∏–º–µ—Ä (a+b)/c –∏–ª–∏ (‚àö3)/2, —Å—Ç–µ–ø–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é Unicode-—Å–∏–º–≤–æ–ª–æ–≤ (x¬≤, c‚Åµ, a‚Åø), –Ω–µ —Å–∏–º–≤–æ–ª ^. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX, –¥—Ä–æ–±–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –∑–≤—ë–∑–¥–æ—á–∫–∏, markdown –∏–ª–∏ —ç–º–æ–¥–∑–∏. –§–æ—Ä–º—É–ª—ã –ø–∏—à–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ, –∞ –æ —Å–æ–≤–µ—Ç–∞—Ö, —Ç–µ–æ—Ä–∏–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –º–µ—Ç–æ–¥–∞—Ö –æ–±—É—á–µ–Ω–∏—è, –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."
    ),
    "üá¨üáß English": (
        "en",
        "If the user's question is about solving a mathematical problem or calculation, answer using formulas and clear steps as if written by hand: use ‚àö for roots, fractions as (numerator)/(denominator), e.g., (a+b)/c or (‚àö3)/2, and for powers use Unicode superscript characters (x¬≤, c‚Åµ, a‚Åø), not the ^ symbol. Never use LaTeX, stacked fractions, bold, italics, asterisks, markdown, or emojis. Write formulas on separate lines, with no symbols at the beginning. If the question is not about a specific math problem but rather about advice, theory, motivation, or learning methods, provide a clear, friendly, and detailed answer in regular text."
    ),
}
DEFAULT_LANG = "üá∑üá¥ Rom√¢nƒÉ"

MESSAGES = {
    "choose_language": {
        "ro": "Alege limba doritƒÉ:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Choose your preferred language:"
    },
    "start_new_chat": {
        "ro": "Ai √Ænceput un chat nou! √éntreabƒÉ orice vrei.",
        "ru": "–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç! –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.",
        "en": "You have started a new chat! Ask anything."
    },
    "no_ocr_text": {
        "ro": "Nu am text de tradus. Trimite o pozƒÉ mai √Ænt√¢i.",
        "ru": "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        "en": "No text to translate. Please send a photo first."
    },
    "ocr_fail": {
        "ro": "Nu am putut recunoa»ôte textul din imagine :(",
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω OCR :(",
        "en": "Failed to recognize text from image :("
    },
    "send_photo": {
        "ro": "Trimite o pozƒÉ cu text.",
        "ru": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.",
        "en": "Send a photo with text."
    },
    "profile_intro": {
        "ro": "Profilul tƒÉu:",
        "ru": "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:",
        "en": "Your profile:"
    },
    "admin_help": {
        "ro": "Pentru a lua legƒÉtura cu un administrator, scrie pe Telegram: @adminusername\nsau trimite un email la: admin@gmail.com",
        "ru": "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @adminusername\n–∏–ª–∏ –Ω–∞ email: admin@gmail.com",
        "en": "To contact an administrator, write on Telegram: @adminusername\nor send an email to: admin@gmail.com"
    },
    "choose_lang_cmd": {
        "ro": "Alege limba doritƒÉ:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Choose your preferred language:"
    },
    "pro_only": {
        "ro": "‚ùó Aceasta este disponibil doar pentru utilizatorii PRO. Pentru func»õionalitƒÉ»õi extinse, scrie /pro",
        "ru": "‚ùó –≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro",
        "en": "‚ùó This is only available for PRO users. For advanced features, type /pro"
    }
}

BUTTONS = {
    "new_chat": {
        "ro": "üÜï Chat nou",
        "ru": "üÜï –ù–æ–≤—ã–π —á–∞—Ç",
        "en": "üÜï New chat"
    },
    "extract_math": {
        "ro": "üîé Extrage problema matematicƒÉ",
        "ru": "üîé –ò–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É",
        "en": "üîé Extract math problem"
    },
    "translate_text": {
        "ro": "üåê Tradu textul",
        "ru": "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç",
        "en": "üåê Translate text"
    },
    "change_language": {
        "ro": "üîÑ SchimbƒÉ limba",
        "ru": "üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "en": "üîÑ Change language"
    },
    "buy_pro": {
        "ro": "üí≥ CumpƒÉrƒÉ PRO",
        "ru": "üí≥ –ö—É–ø–∏—Ç—å PRO",
        "en": "üí≥ Buy PRO"
    },
    "admin_help": {
        "ro": "üÜò Ajutor administrator",
        "ru": "üÜò –ü–æ–º–æ—â—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "en": "üÜò Admin help"
    }
}

def get_lang_code(user_id):
    user_lang_str = user_lang.get(user_id, DEFAULT_LANG)
    return LANGUAGES[user_lang_str][0]

def get_reply_kb(buttons, lang_code):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=BUTTONS[btn][lang_code])] for btn in buttons],
        resize_keyboard=True
    )

lang_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGES.keys()],
    resize_keyboard=True
)

LANG_FILE = "user_lang.json"
HIST_FILE = "user_history.json"
REG_FILE = "user_reg.json"
OCR_TEXT_FILE = "user_ocr.json"

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return {}
    return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_lang = load_json(LANG_FILE)
user_history = load_json(HIST_FILE)
user_reg = load_json(REG_FILE)
user_ocr = load_json(OCR_TEXT_FILE)

MAX_CONTEXT = 5

router = Router()
translator = Translator()

def get_sys_prompt(lang):
    return LANGUAGES[lang][1]

ADMIN_IDS = [6009593253]

def clean_star_lines(text):
    return re.sub(r'^[\*\-\‚Ä¢\u2022]\s*', '', text, flags=re.MULTILINE)

async def online_ocr_space(image_bytes, lang="eng"):
    api_url = "https://api.ocr.space/parse/image"
    headers = {
        "apikey": "K86260492688957"
    }
    data = aiohttp.FormData()
    data.add_field("file", image_bytes, filename="image.jpg")
    data.add_field("language", lang)
    data.add_field("isOverlayRequired", "false")
    data.add_field("OCREngine", "2")
    async with aiohttp.ClientSession() as session:
        async with session.post(api_url, data=data, headers=headers) as resp:
            try:
                result = await resp.json()
                print("–û—Ç–≤–µ—Ç OCR.space:", result)
                return result["ParsedResults"][0]["ParsedText"]
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ OCR:", e)
                return None

async def send_profile(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    if user_id not in user_reg:
        user_reg[user_id] = datetime.datetime.now().strftime("%Y-%m-%d")
        save_json(REG_FILE, user_reg)
    data_reg = user_reg.get(user_id, "N/A")
    total_questions = len(user_history.get(user_id, [])) // 2 if user_id in user_history else 0
    account_type = "Pro" if is_pro(int(user_id)) else "Free"
    lang = user_lang.get(user_id, DEFAULT_LANG)
    profile = {
        "name": f"{message.from_user.full_name}",
        "uid": f"#U{user_id}",
        "reg": data_reg,
        "type": account_type,
        "questions": f"{total_questions}",
        "status": "Active",
        "lang": lang,
        "last": "N/A",
        "country": "üá≤üá© Moldova"
    }
    text = (
        f"{MESSAGES['profile_intro'][lang_code]}\n"
        f"üë§ <b>{profile['name']}</b>\n"
        f"üÜî {profile['uid']}\n"
        f"üìÜ {profile['reg']}\n"
        f"üíº {profile['type']}\n"
        f"‚ùì {profile['questions']}\n"
        f"‚úÖ {profile['status']}\n"
        f"üåê {profile['lang']}\n"
        f"üïí {profile['last']}\n"
        f"üåç {profile['country']}\n"
    )
    kb = get_reply_kb(["change_language", "buy_pro", "admin_help", "new_chat"], lang_code)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")

@router.message(lambda m: m.content_type == "photo")
async def handle_photo(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    print("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")
    try:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        image_bytes = file_bytes.read()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", e)
        return

    try:
        extracted_text = await online_ocr_space(image_bytes, lang=lang_code)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç OCR:", extracted_text)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OCR.space: {e}")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ OCR:", e)
        return

    if not extracted_text or not extracted_text.strip():
        await message.reply(MESSAGES["ocr_fail"][lang_code])
        print("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR")
        return

    user_ocr[user_id] = extracted_text
    save_json(OCR_TEXT_FILE, user_ocr)

    kb = get_reply_kb(["extract_math", "translate_text"], lang_code)
    await message.reply(
        f"{MESSAGES['send_photo'][lang_code]}\n\n{extracted_text}\n\n",
        reply_markup=kb
    )
    print("–ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

@router.message(lambda m: m.text in [BUTTONS["translate_text"][l] for l in BUTTONS["translate_text"].keys()])
async def translate_last_ocr(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    user_ocr_text = user_ocr.get(user_id)
    if not user_ocr_text:
        await message.reply(MESSAGES["no_ocr_text"][lang_code])
        return
    try:
        translation = translator.translate(user_ocr_text, dest=lang_code)
        await message.reply(f"{translation.text}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

@router.message(lambda m: m.text in [BUTTONS["extract_math"][l] for l in BUTTONS["extract_math"].keys()])
async def analyze_math_problem(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    user_ocr_text = user_ocr.get(user_id)
    if not user_ocr_text:
        await message.reply(MESSAGES["no_ocr_text"][lang_code])
        return
    await message.reply(f"{user_ocr_text}")

@router.message(Command("pro"))
async def make_pro(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    if user_id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_pro(uid)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            set_pro(message.from_user.id)
            await message.answer("–í–∞–º –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
        await send_profile(message)
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PRO.")

@router.message(Command("free"))
async def remove_pro(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    if user_id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_free(uid)
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–Ω—è—Ç PRO.")
        else:
            set_free(message.from_user.id)
            await message.answer("PRO –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω.")
        await send_profile(message)
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.message(Command("status"))
async def status(message: types.Message):
    lang_code = get_lang_code(str(message.from_user.id))
    if is_pro(message.from_user.id):
        await message.answer("–£ –≤–∞—Å PRO-–¥–æ—Å—Ç—É–ø üü¢")
    else:
        await message.answer("–£ –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø üîò. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro")

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    if user_id not in user_lang:
        await message.answer(MESSAGES["choose_language"][lang_code], reply_markup=lang_kb)
    else:
        await send_profile(message)

@router.message(lambda m: m.text in LANGUAGES)
async def set_language(message: types.Message):
    user_id = str(message.from_user.id)
    user_lang[user_id] = message.text
    save_json(LANG_FILE, user_lang)
    await send_profile(message)

@router.message(lambda m: m.text in [BUTTONS["change_language"][l] for l in BUTTONS["change_language"].keys()])
async def show_langs(message: types.Message):
    lang_code = get_lang_code(str(message.from_user.id))
    await message.answer(MESSAGES["choose_language"][lang_code], reply_markup=lang_kb)

@router.message(lambda m: m.text in [BUTTONS["admin_help"][l] for l in BUTTONS["admin_help"].keys()])
async def help_admin(message: types.Message):
    lang_code = get_lang_code(str(message.from_user.id))
    await message.answer(MESSAGES["admin_help"][lang_code])

@router.message(lambda m: m.text in [BUTTONS["new_chat"][l] for l in BUTTONS["new_chat"].keys()])
async def new_chat_profile(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    user_history.pop(user_id, None)
    save_json(HIST_FILE, user_history)
    kb = get_reply_kb(["new_chat"], lang_code)
    await message.answer(
        MESSAGES["start_new_chat"][lang_code],
        reply_markup=kb
    )

@router.message(Command("language"))
async def choose_language(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    user_history.pop(user_id, None)
    save_json(HIST_FILE, user_history)
    user_lang.pop(user_id, None)
    save_json(LANG_FILE, user_lang)
    await message.answer(
        MESSAGES["choose_lang_cmd"][lang_code],
        reply_markup=lang_kb
    )

@router.message(Command("newchat"))
async def new_chat_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    user_history.pop(user_id, None)
    save_json(HIST_FILE, user_history)
    kb = get_reply_kb(["new_chat"], lang_code)
    await message.answer(
        MESSAGES["start_new_chat"][lang_code],
        reply_markup=kb
    )

@router.message()
async def ask_groq(message: types.Message):
    user_id = str(message.from_user.id)
    lang_code = get_lang_code(user_id)
    if user_id not in user_lang:
        await message.answer(
            MESSAGES["choose_language"][lang_code],
            reply_markup=lang_kb
        )
        return

    if not is_pro(int(user_id)):
        if len(message.text) > 250:
            await message.answer(MESSAGES["pro_only"][lang_code], reply_markup=get_reply_kb(["new_chat"], lang_code))
            return

    if message.text.strip() in [BUTTONS["new_chat"][l] for l in BUTTONS["new_chat"].keys()]:
        user_history.pop(user_id, None)
        save_json(HIST_FILE, user_history)
        await message.answer(
            MESSAGES["start_new_chat"][lang_code],
            reply_markup=get_reply_kb(["new_chat"], lang_code)
        )
        return

    hist = user_history.setdefault(user_id, [])
    hist.append({"role": "user", "content": message.text.strip()})
    if len(hist) > MAX_CONTEXT * 2:
        hist = hist[-MAX_CONTEXT * 2 :]
    user_history[user_id] = hist
    save_json(HIST_FILE, user_history)

    lang = user_lang.get(user_id, DEFAULT_LANG)
    sys_prompt = get_sys_prompt(lang)
    messages_for_groq = [{"role": "system", "content": sys_prompt}] + hist

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama-3.3-70b-versatile",
        "messages": messages_for_groq,
        "temperature": 0.7,
        "max_tokens": 1000
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    answer = result["choices"][0]["message"]["content"]
                    answer = clean_star_lines(answer.strip())
                    hist.append({"role": "assistant", "content": answer})
                    if len(hist) > MAX_CONTEXT * 2:
                        hist = hist[-MAX_CONTEXT * 2 :]
                    user_history[user_id] = hist
                    save_json(HIST_FILE, user_history)
                    await message.answer(answer, reply_markup=get_reply_kb(["new_chat"], lang_code))
                else:
                    err_text = await resp.text()
                    logging.error(f"Groq API error: {resp.status}, {err_text}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_reply_kb(["new_chat"], lang_code))
        except Exception as e:
            logging.exception("Error contacting Groq API")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_reply_kb(["new_chat"], lang_code))

async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
