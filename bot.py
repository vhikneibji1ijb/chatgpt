import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiohttp

from pro_users import is_pro, set_pro, set_free

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ GROQ_API_KEY –≤ .env!")

logging.basicConfig(level=logging.INFO)

LANGUAGES = {
    "üá∑üá¥ Rom√¢nƒÉ": ("ro", "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É–º—ã–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."),
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": ("ru", "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."),
    "üá¨üáß English": ("en", "Reply only in English, ignore all other languages."),
}
DEFAULT_LANG = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"

lang_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá∑üá¥ Rom√¢nƒÉ")],
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [KeyboardButton(text="üá¨üáß English")]
    ],
    resize_keyboard=True
)

user_lang = {}  # user_id: emoji —è–∑—ã–∫–∞

user_history = {}  # user_id: list of messages (context)
MAX_CONTEXT = 5    # —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç) –ø–æ–º–Ω–∏—Ç—å

router = Router()

def get_sys_prompt(lang):
    return LANGUAGES[lang][1]

ADMIN_IDS = [6009593253]  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

@router.message(Command("pro"))
async def make_pro(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_pro(uid)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            set_pro(message.from_user.id)
            await message.answer("–í–∞–º –≤—ã–¥–∞–Ω PRO –Ω–∞ 30 –¥–Ω–µ–π.")
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PRO.")

@router.message(Command("free"))
async def remove_pro(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        parts = message.text.split()
        if len(parts) >= 2:
            uid = int(parts[1])
            set_free(uid)
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–Ω—è—Ç PRO.")
        else:
            set_free(message.from_user.id)
            await message.answer("–í–∞—à PRO —Å–Ω—è—Ç.")
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.message(Command("status"))
async def status(message: types.Message):
    if is_pro(message.from_user.id):
        await message.answer("–£ –≤–∞—Å PRO-–¥–æ—Å—Ç—É–ø üü¢")
    else:
        await message.answer("–£ –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø üîò. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro")

@router.message(Command("start"))
@router.message(Command("language"))
async def choose_language(message: types.Message):
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —É–±–µ—Ä–∏ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ)
    user_history.pop(message.from_user.id, None)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Alege limba / Choose language:",
        reply_markup=lang_kb
    )

@router.message(lambda m: m.text in LANGUAGES)
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = message.text
    greetings = {
        "üá∑üá¥ Rom√¢nƒÉ": "Salut! Trimite-mi √Æntrebarea ta.",
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        "üá¨üáß English": "Hi! Please ask your question."
    }
    await message.answer(greetings[message.text], reply_markup=types.ReplyKeyboardRemove())

@router.message()
async def ask_groq(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤—É
    if user_id not in user_lang:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / VƒÉ rugƒÉm sƒÉ alege»õi limba / Please choose language:",
            reply_markup=lang_kb
        )
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FREE
    if not is_pro(user_id):
        if len(message.text) > 250:
            await message.answer("‚ùó –≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /pro")
            return

    # === –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    hist = user_history.setdefault(user_id, [])
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hist.append({"role": "user", "content": message.text.strip()})
    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (—Ö—Ä–∞–Ω–∏–º MAX_CONTEXT*2 —Å–æ–æ–±—â–µ–Ω–∏–π: –≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç)
    if len(hist) > MAX_CONTEXT * 2:
        hist = hist[-MAX_CONTEXT * 2 :]
    user_history[user_id] = hist

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM: system + –∏—Å—Ç–æ—Ä–∏—è
    lang = user_lang.get(user_id, DEFAULT_LANG)
    sys_prompt = get_sys_prompt(lang)
    messages_for_groq = [{"role": "system", "content": sys_prompt}] + hist

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama-3.3-70b-versatile",
        "messages": messages_for_groq,
        "temperature": 0.7,
        "max_tokens": 1000
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    answer = result["choices"][0]["message"]["content"]
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    hist.append({"role": "assistant", "content": answer.strip()})
                    if len(hist) > MAX_CONTEXT * 2:
                        hist = hist[-MAX_CONTEXT * 2 :]
                    user_history[user_id] = hist
                    await message.answer(answer.strip())
                else:
                    err_text = await resp.text()
                    logging.error(f"Groq API error: {resp.status}, {err_text}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logging.exception("Error contacting Groq API")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
