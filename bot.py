import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiohttp

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ GROQ_API_KEY –≤ .env!")

logging.basicConfig(level=logging.INFO)

LANGUAGES = {
    "üá∑üá¥ Rom√¢nƒÉ": ("ro", "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É–º—ã–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."),
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": ("ru", "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."),
    "üá¨üáß English": ("en", "Reply only in English, ignore all other languages."),
}
DEFAULT_LANG = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"

lang_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá∑üá¥ Rom√¢nƒÉ")],
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [KeyboardButton(text="üá¨üáß English")]
    ],
    resize_keyboard=True
)

user_lang = {}
router = Router()

def get_sys_prompt(lang):
    return LANGUAGES[lang][1]

@router.message(Command("start"))
@router.message(Command("language"))
async def choose_language(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Alege limba / Choose language:",
        reply_markup=lang_kb
    )

@router.message(lambda m: m.text in LANGUAGES)
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = message.text
    greetings = {
        "üá∑üá¥ Rom√¢nƒÉ": "Salut! Trimite-mi √Æntrebarea ta.",
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        "üá¨üáß English": "Hi! Please ask your question."
    }
    await message.answer(greetings[message.text], reply_markup=types.ReplyKeyboardRemove())

@router.message()
async def ask_groq(message: types.Message):
    lang = user_lang.get(message.from_user.id, DEFAULT_LANG)
    sys_prompt = get_sys_prompt(lang)
    prompt = message.text.strip()

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-8b-8192",
        "messages": [
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    answer = result["choices"][0]["message"]["content"]
                    await message.answer(answer.strip())
                else:
                    err_text = await resp.text()
                    logging.error(f"Groq API error: {resp.status}, {err_text}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logging.exception("Error contacting Groq API")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
