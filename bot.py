import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv
import aiohttp
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å TELEGRAM_TOKEN –∏ GROQ_API_KEY!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üá∑üá¥ Rom√¢nƒÉ")],
    [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
    [KeyboardButton(text="üá¨üáß English")]
])

system_prompts = {
    "üá∑üá¥ Rom√¢nƒÉ": "E»ôti un profesor din Moldova care explicƒÉ materia elevilor din clasele 5‚Äì12, inclusiv pentru examenele EN »ôi BAC.",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "–¢—ã —É—á–∏—Ç–µ–ª—å –∏–∑ –ú–æ–ª–¥–æ–≤—ã, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —à–∫–æ–ª—å–Ω—ã–µ —Ç–µ–º—ã —É—á–µ–Ω–∏–∫–∞–º 5‚Äì12 –∫–ª–∞—Å—Å–æ–≤, –≥–æ—Ç–æ–≤–∏—à—å –∫ EN –∏ BAC.",
    "üá¨üáß English": "You are a Moldovan teacher explaining school material to students (grades 5‚Äì12) and preparing for national exams."
}
default_lang = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"

user_state = {}

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("Alege limba / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose language:", reply_markup=lang_kb)

@router.message(lambda m: m.text in system_prompts.keys())
async def language_handler(message: types.Message):
    uid = message.from_user.id
    user_state[uid] = {"lang": message.text}
    text = {
        "üá∑üá¥ Rom√¢nƒÉ": "Salut! Trimite-mi o √Æntrebare legatƒÉ de temƒÉ sau BAC.",
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–º–∞—à–∫–µ –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω—É.",
        "üá¨üáß English": "Hi! Ask me anything related to school or exams."
    }
    await message.answer(text[message.text])

@router.message()
async def main_handler(message: types.Message):
    uid = message.from_user.id
    lang = user_state.get(uid, {}).get("lang", default_lang)
    prompt = message.text

    sys_prompt = system_prompts.get(lang, system_prompts[default_lang])

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "llama3-8b-8192",
        "messages": [
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as resp:
                if resp.status != 200:
                    err_text = await resp.text()
                    logging.error(f"Groq API error: {resp.status}, {err_text}")
                    await message.answer("‚ö†Ô∏è Eroare / –û—à–∏–±–∫–∞ / Error: API error, try later.")
                    return
                result = await resp.json()
                answer = result["choices"][0]["message"]["content"]
                await message.answer(answer.strip())
        except asyncio.TimeoutError:
            await message.answer("‚ö†Ô∏è Eroare / –û—à–∏–±–∫–∞ / Error: Timeout, try again.")
        except Exception as e:
            logging.exception("Unexpected error")
            await message.answer("‚ö†Ô∏è Eroare / –û—à–∏–±–∫–∞ / Error: Unexpected error.")

async def main():
    session = AiohttpSession()
    bot = Bot(token=TELEGRAM_TOKEN, session=session)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
